{"version":3,"sources":["/Users/cesarangulo/Documents/celo-academy/celo-mx/tests/smoke/smoke.test.ts"],"sourcesContent":["/**\n * 🔥 SMOKE TESTS - Post-Deployment Validation\n * \n * These tests run against live deployments to verify basic functionality\n * after deployment. They are designed to be fast and catch critical issues\n * that would prevent users from using the application.\n * \n * CRITICAL: These tests run in production - keep them safe!\n */\n\nimport { test, expect } from '@playwright/test';\n\nconst BASE_URL = process.env.PRODUCTION_URL || process.env.PLAYWRIGHT_BASE_URL || 'http://localhost:3000';\n\ntest.describe('🔥 Smoke Tests - Critical Path Verification', () => {\n  \n  test.beforeEach(async ({ page }) => {\n    // Set up common test configuration\n    await page.goto(BASE_URL);\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 1: APPLICATION LOADS\n  // ==========================================================================\n  test('🌐 Application loads successfully', async ({ page }) => {\n    // Verify the page loads without errors\n    await expect(page).toHaveTitle(/Celo Academy Mexico/i);\n    \n    // Check for critical elements\n    await expect(page.locator('body')).toBeVisible();\n    \n    // Verify no JavaScript errors\n    const jsErrors: string[] = [];\n    page.on('pageerror', error => jsErrors.push(error.message));\n    page.on('console', msg => {\n      if (msg.type() === 'error') {\n        jsErrors.push(msg.text());\n      }\n    });\n    \n    // Wait a bit to catch any async errors\n    await page.waitForTimeout(2000);\n    \n    expect(jsErrors).toHaveLength(0);\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 2: AUTHENTICATION SYSTEM\n  // ==========================================================================\n  test('🔐 Authentication system is accessible', async ({ page }) => {\n    // Look for login/connect wallet button\n    const connectButton = page.locator('button:has-text(\"Connect Wallet\"), button:has-text(\"Conectar\"), button:has-text(\"Login\")').first();\n    await expect(connectButton).toBeVisible({ timeout: 10000 });\n    \n    // Verify button is clickable (don't actually click in production)\n    await expect(connectButton).toBeEnabled();\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 3: API HEALTH CHECK\n  // ==========================================================================\n  test('⚡ API endpoints are responding', async ({ page }) => {\n    // Test health check endpoint\n    const response = await page.request.get(`${BASE_URL}/api/health`);\n    expect(response.status()).toBe(200);\n    \n    const healthData = await response.json();\n    expect(healthData.status).toBe('ok');\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 4: DATABASE CONNECTIVITY\n  // ==========================================================================\n  test('🗄️ Database connectivity works', async ({ page }) => {\n    // Test a simple read endpoint that doesn't require auth\n    const response = await page.request.get(`${BASE_URL}/api/courses`);\n    \n    // Should return 200 or 401 (if auth required), but not 500 (server error)\n    expect([200, 401, 403].includes(response.status())).toBeTruthy();\n    \n    // If it returns data, verify structure\n    if (response.status() === 200) {\n      const data = await response.json();\n      expect(Array.isArray(data) || typeof data === 'object').toBeTruthy();\n    }\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 5: STATIC ASSETS LOAD\n  // ==========================================================================\n  test('🖼️ Critical assets load successfully', async ({ page }) => {\n    // Check for failed network requests\n    const failedRequests: string[] = [];\n    \n    page.on('requestfailed', request => {\n      // Only track critical assets, ignore non-essential ones\n      if (request.url().includes('.css') || \n          request.url().includes('.js') || \n          request.url().includes('_next/static')) {\n        failedRequests.push(request.url());\n      }\n    });\n    \n    // Navigate and wait for load\n    await page.reload();\n    await page.waitForLoadState('networkidle');\n    \n    // Verify no critical assets failed\n    expect(failedRequests).toHaveLength(0);\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 6: RESPONSIVE DESIGN\n  // ==========================================================================\n  test('📱 Mobile responsiveness works', async ({ page }) => {\n    // Test mobile viewport\n    await page.setViewportSize({ width: 375, height: 667 });\n    await page.reload();\n    await page.waitForLoadState('networkidle');\n    \n    // Verify page is still usable\n    await expect(page.locator('body')).toBeVisible();\n    \n    // Check for horizontal scroll (common mobile issue)\n    const bodyWidth = await page.locator('body').evaluate(el => el.scrollWidth);\n    const viewportWidth = await page.viewportSize();\n    \n    expect(bodyWidth).toBeLessThanOrEqual((viewportWidth?.width || 375) + 20); // Allow small buffer\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 7: SECURITY HEADERS\n  // ==========================================================================\n  test('🔒 Security headers are present', async ({ page }) => {\n    const response = await page.request.get(BASE_URL);\n    const headers = response.headers();\n    \n    // Check for critical security headers\n    expect(headers['x-frame-options']).toBeDefined();\n    expect(headers['x-content-type-options']).toBe('nosniff');\n    expect(headers['x-xss-protection'] || headers['content-security-policy']).toBeDefined();\n    \n    // Verify HTTPS redirect in production\n    if (BASE_URL.includes('vercel.app') || BASE_URL.includes('celo-mx')) {\n      expect(BASE_URL.startsWith('https://')).toBeTruthy();\n    }\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 8: PERFORMANCE BASELINE\n  // ==========================================================================\n  test('⚡ Page loads within acceptable time', async ({ page }) => {\n    const startTime = Date.now();\n    \n    await page.goto(BASE_URL);\n    await page.waitForLoadState('domcontentloaded');\n    \n    const loadTime = Date.now() - startTime;\n    \n    // Page should load within 5 seconds (generous for smoke test)\n    expect(loadTime).toBeLessThan(5000);\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 9: FORM FUNCTIONALITY\n  // ==========================================================================\n  test('📝 Forms can be accessed', async ({ page }) => {\n    // Look for any forms on the page\n    const forms = page.locator('form');\n    const formCount = await forms.count();\n    \n    if (formCount > 0) {\n      // Just verify forms exist and have proper structure\n      const firstForm = forms.first();\n      await expect(firstForm).toBeVisible();\n      \n      // Check for input fields\n      const inputs = firstForm.locator('input, textarea, select');\n      const inputCount = await inputs.count();\n      expect(inputCount).toBeGreaterThan(0);\n    }\n  });\n\n  // ==========================================================================\n  // CRITICAL PATH 10: NAVIGATION WORKS\n  // ==========================================================================\n  test('🧭 Basic navigation functions', async ({ page }) => {\n    // Look for navigation elements\n    const navLinks = page.locator('nav a, header a, [role=\"navigation\"] a').first();\n    \n    if (await navLinks.count() > 0) {\n      const firstLink = navLinks.first();\n      await expect(firstLink).toBeVisible();\n      \n      // Verify links have proper hrefs\n      const href = await firstLink.getAttribute('href');\n      expect(href).toBeTruthy();\n      expect(href).not.toBe('#');\n    }\n  });\n\n});\n\n// =============================================================================\n// UTILITY TESTS - ENVIRONMENT VALIDATION\n// =============================================================================\ntest.describe('🔧 Environment Validation', () => {\n  \n  test('🌍 Environment variables are configured', async ({ page }) => {\n    // Test that essential endpoints exist\n    const healthResponse = await page.request.get(`${BASE_URL}/api/health`);\n    \n    // If health endpoint doesn't exist, at least verify the base URL is accessible\n    if (healthResponse.status() === 404) {\n      const baseResponse = await page.request.get(BASE_URL);\n      expect([200, 301, 302].includes(baseResponse.status())).toBeTruthy();\n    } else {\n      expect(healthResponse.ok()).toBeTruthy();\n    }\n  });\n\n  test('📡 DNS resolution works', async ({ page }) => {\n    // Simple connectivity test\n    const startTime = Date.now();\n    const response = await page.request.get(BASE_URL);\n    const responseTime = Date.now() - startTime;\n    \n    // Should respond within 3 seconds\n    expect(responseTime).toBeLessThan(3000);\n    expect(response.status()).toBeLessThan(500); // Not a server error\n  });\n\n});"],"names":["BASE_URL","process","env","PRODUCTION_URL","PLAYWRIGHT_BASE_URL","test","describe","beforeEach","page","goto","expect","toHaveTitle","locator","toBeVisible","jsErrors","on","error","push","message","msg","type","text","waitForTimeout","toHaveLength","connectButton","first","timeout","toBeEnabled","response","request","get","status","toBe","healthData","json","includes","toBeTruthy","data","Array","isArray","failedRequests","url","reload","waitForLoadState","setViewportSize","width","height","bodyWidth","evaluate","el","scrollWidth","viewportWidth","viewportSize","toBeLessThanOrEqual","headers","toBeDefined","startsWith","startTime","Date","now","loadTime","toBeLessThan","forms","formCount","count","firstForm","inputs","inputCount","toBeGreaterThan","navLinks","firstLink","href","getAttribute","not","healthResponse","baseResponse","ok","responseTime"],"mappings":"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"}