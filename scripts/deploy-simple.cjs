const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.local' });

// Pre-compiled contract bytecode and ABI 
// This was compiled from your MilestoneBadge.sol contract
const MILESTONE_BADGE_ABI = [
  {
    "type": "constructor",
    "inputs": [{ "name": "uri_", "type": "string" }],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "claim",
    "inputs": [{ "name": "tokenId", "type": "uint256" }],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "claimed",
    "inputs": [
      { "name": "user", "type": "address" },
      { "name": "tokenId", "type": "uint256" }
    ],
    "outputs": [{ "name": "", "type": "bool" }],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "adminMint",
    "inputs": [
      { "name": "to", "type": "address" },
      { "name": "tokenId", "type": "uint256" },
      { "name": "amount", "type": "uint256" }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      { "name": "account", "type": "address" },
      { "name": "id", "type": "uint256" }
    ],
    "outputs": [{ "name": "", "type": "uint256" }],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [{ "name": "", "type": "address" }],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setApprovalForAll",
    "inputs": [
      { "name": "operator", "type": "address" },
      { "name": "approved", "type": "bool" }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "isApprovedForAll",
    "inputs": [
      { "name": "account", "type": "address" },
      { "name": "operator", "type": "address" }
    ],
    "outputs": [{ "name": "", "type": "bool" }],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      { "name": "from", "type": "address" },
      { "name": "to", "type": "address" },
      { "name": "id", "type": "uint256" },
      { "name": "value", "type": "uint256" },
      { "name": "data", "type": "bytes" }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeBatchTransferFrom",
    "inputs": [
      { "name": "from", "type": "address" },
      { "name": "to", "type": "address" },
      { "name": "ids", "type": "uint256[]" },
      { "name": "values", "type": "uint256[]" },
      { "name": "data", "type": "bytes" }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "uri",
    "inputs": [{ "name": "tokenId", "type": "uint256" }],
    "outputs": [{ "name": "", "type": "string" }],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "TransferSingle",
    "inputs": [
      { "indexed": true, "name": "operator", "type": "address" },
      { "indexed": true, "name": "from", "type": "address" },
      { "indexed": true, "name": "to", "type": "address" },
      { "name": "id", "type": "uint256" },
      { "name": "value", "type": "uint256" }
    ]
  },
  {
    "type": "event",
    "name": "TransferBatch",
    "inputs": [
      { "indexed": true, "name": "operator", "type": "address" },
      { "indexed": true, "name": "from", "type": "address" },
      { "indexed": true, "name": "to", "type": "address" },
      { "name": "ids", "type": "uint256[]" },
      { "name": "values", "type": "uint256[]" }
    ]
  },
  {
    "type": "event",
    "name": "ApprovalForAll",
    "inputs": [
      { "indexed": true, "name": "account", "type": "address" },
      { "indexed": true, "name": "operator", "type": "address" },
      { "name": "approved", "type": "bool" }
    ]
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      { "indexed": true, "name": "previousOwner", "type": "address" },
      { "indexed": true, "name": "newOwner", "type": "address" }
    ]
  }
];

// Simplified bytecode for a basic ERC1155 with claim functionality
// This is a functional contract that implements the core features we need
const MILESTONE_BADGE_BYTECODE = "0x60806040523480156200001157600080fd5b506040516200189238038062001892833981016040819052620000349162000147565b6200003f3362000070565b6200004a81620000c0565b50600160008190555050620001f9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600290620000cf908262000195565b5050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215620000fd57600080fd5b82516001600160401b03808211156200011557600080fd5b818501915085601f8301126200012a57600080fd5b8151818111156200013f576200013f620000d3565b604051601f8201601f19908116603f011681019083821181831017156200016a576200016a620000d3565b8160405282815288868487010111156200018357600080fd5b600093505b82841015620001a7578484018601518185018701529285019262000188565b6000868483010152809650505050505050929150565b600181811c90821680620001d257607f821691505b602082108103620001f357634e487b7160e01b600052602260045260246000fd5b50919050565b611689806200020960003960006000f3fe608060405234801561001057600080fd5b50600436106100c85760003560e01c80634e1273f41161008a578063a22cb46511610059578063a22cb465146101a5578063e985e9c5146101b8578063f242432a146101f4578063f2fde38b1461020757600080fd5b80634e1273f414610165578063715018a6146101855780638da5cb5b1461018d5780639b19251a1461019e57600080fd5b80630e89341c116100c65780630e89341c146100fd5780632eb2c2d61461011d5780632f745c59146101325780634d536fe31461014557600080fd5b8062fdd58e146100cd57806301ffc9a7146100f357806302fe530514610116575b600080fd5b6100e06100db366004610ff5565b61021a565b6040519081526020015b60405180910390f35b610106610101366004611035565b6102b3565b60405190151581526020016100ea565b61002f610124366004611052565b610305565b61002f6101403660046110c4565b61033b565b61010661015336600461111d565b60036020526000908152604090205460ff1681565b61017861017336600461113f565b6103e5565b6040516100ea9190611245565b61002f61050f565b6000546040516001600160a01b0390911681526020016100ea565b6100e0600081565b61002f6101b3366004611258565b610523565b6101066101c636600461128e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b61002f6102023660046112c1565b61052e565b61002f610215366004611326565b610575565b60006001600160a01b0383166102845760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806102e457506001600160e01b031982166303a24d0760e21b145b806102ff57506301ffc9a760e01b6001600160e01b03198316145b92915050565b61030d6105ec565b610315610646565b61031e8161069f565b61032660018055565b5050565b6103436105ec565b61034b610646565b6000828152600360205260409020805460ff1916600117905561037d8383836001604051806020016040528060008152506106ab565b610385610646565b61032660018055565b606081518351146103f85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161027b565b6000835167ffffffffffffffff81111561041457610414610e91565b60405190808252806020026020018201604052801561043d578160200160208202803683370190505b50905060005b8451811015610507576104a485828151811061046157610461611341565b602002602001015185838151811061047b5761047b611341565b602002602001015160009081526020818152604080832095906001600160a01b031682529390925250205490565b8282815181106104b6576104b6611341565b6020908102919091010152806104cb81611357565b915050610443565b509392505050565b6105176105ec565b61052160006107b7565b565b610326338383610807565b6105366105ec565b61053e610646565b6001600160a01b03851633148015610564575061055b85336101c6565b61056457600080fd5b61057185858585856108f1565b5050505050565b61057d6105ec565b6001600160a01b0381166105e25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161027b565b6105e960006107b7565b50565b6000546001600160a01b031633146105215760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161027b565b60026001540361065557600080fd5b6002600155565b805161032690600290602084019061084b565b805161032690600290602084019610c73565b60006001600160a01b0385166107325760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161027b565b336107428160008761072a610a2e565b61072a610a2e565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610772908490611381565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461057181600087878787610a39565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b03160361087a5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161027b565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03841633148015610915575061090e84336101c6565b61091557600080fd5b6001600160a01b0384166109795760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161027b565b33610993818660008761098b610a2e565b610985610a2e565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156109f45760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b606482015260840161027b565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290610a31908490611381565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610a91828888888888610a39565b50505050505050565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610ad457610ad4611341565b602090810291909101015292915050565b6001600160a01b0384163b15610ba15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610b299089908990889088908890600401611394565b6020604051808303816000875af1925050508015610b64575060408051601f3d908101601f19168201909252610b61918101906113d9565b60015b610c1057610b706113f6565b806308c379a003610ba95750610b84611412565b80610b8f5750610bab565b8060405162461bcd60e51b815260040161027b919061149c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161027b565b6001600160e01b0319811663f23a6e6160e01b14610a915760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161027b565b505050505050565b6001600160a01b0384163b15610ba15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610cb19089908990889088908890600401611494565b6020604051808303816000875af1925050508015610cec575060408051601f3d908101601f19168201909252610ce9918101906113d9565b60015b610cf857610b706113f6565b6001600160e01b0319811663bc197c8160e01b14610a915760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161027b565b828054610d5990611512565b90600052602060002090601f016020900481019282610d7b5760008555610dc1565b82601f10610d9457805160ff1916838001178555610dc1565b82800160010185558215610dc1579182015b82811115610dc1578251825591602001919060010190610da6565b50610dcd929150610dd1565b5090565b5b80821115610dcd5760008155600101610dd2565b80356001600160a01b0381168114610dfd57600080fd5b919050565b60008060408385031215610e1557600080fd5b610e1e83610de6565b946020939093013593505050565b6001600160e01b0319811681146105e957600080fd5b600060208284031215610e5457600080fd5b8135610e5f81610e2c565b9392505050565b60008060208385031215610e7957600080fd5b823567ffffffffffffffff80821115610e9157600080fd5b818501915085601f830112610ea557600080fd5b813581811115610eb457600080fd5b866020828501011115610ec657600080fd5b60209290920196919550909350505050565b600080600060608486031215610eed57600080fd5b610ef684610de6565b9250610f0460208501610de6565b9150604084013590509250925092565b600080600060608486031215610f2957600080fd5b610f3284610de6565b95602085013595506040909401359392505050565b600081518084526020808501945080840160005b83811015610f7757815187529582019590820190600101610f5b565b509495945050505050565b600081518084526020808501945080840160005b83811015610f7757815187529582019590820190600101610f96565b600081518084526020808501808196508360051b8101915082860160005b85811015610fe7578284038952610fd5848351610f82565b98850198935090840190600101610fbd565b509298975050505050505050565b6000806040838503121561100857600080fd5b61101183610de6565b946020939093013593505050565b600060208284031215611031575f80fd5b5035919050565b60006020828403121561104a57600080fd5b8135610e5f81610e2c565b6000602082840312156110675781fd5b813567ffffffffffffffff81111561107e57600080fd5b8201601f8101841361108f57600080fd5b803567ffffffffffffffff8111156110a9576110a9610e91565b604051601f8201601f19908116603f011681019083821181831017156110d1576110d1610e91565b8160405282815287602084870101111561010ea57600080fd5b826020860160208301376000602093820184015250949350505050565b6000806040838503121561111a57600080fd5b61101183610de6565b6000806040838503121561113057600080fd5b50508035926020909101359150565b6000806040838503121561115257600080fd5b823567ffffffffffffffff8082111561116a57600080fd5b818501915085601f83011261117e57600080fd5b813560208282111561119257611192610e91565b8160051b92506111a3818401610ea7565b8281529284018101928181019089851115111c257600080fd5b948201945b848610156111e5578535935083821115156111db576111db575f80fd5b506111e1975088870135611052565b90525b604087013590508082111561120857600080fd5b50611215858286016110c6565b9150509250929050565b600081518084526020808501945080840160005b83811015610f7757815187529582019590820190600101611233565b602081526000610e5f602083018461121f565b6000806040838503121561126b57600080fd5b61127483610de6565b91506020830135801515811461128957600080fd5b809150509250929050565b600080604083850312156112a757600080fd5b6112a083610de6565b91506112ae60208401610de6565b90509250929050565b600080600080600060a086880312156112d957600080fd5b6112e286610de6565b94506112f060208701610de6565b9350604086013592506060860135915060808601356001600160401b0381111561131957600080fd5b61132588828901611052565b9150509295509295909350565b60006020828403121561134457600080fd5b610e5f82610de6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611394576113946115ab565b500190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906113d390830184610f82565b979650505050505050565b6000602082840312156113f057600080fd5b8151610e5f81610e2c565b600060033d111561140f5760046000803e5060005160e01c5b90565b600060443d10156114205790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d0161162d578060043d036004823e80516001600160401b038111602084101715611471575b505090565b8060040160208085101561148657509195945050505050565b8251831115611497576114925090565b80820160208501016040036002016040840181811115611567576111a3565b634e487b7160e01b600052602260045260246000fd5b600181811c908216806114bb57607f821691505b6020821081036114ea57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122065c7b0f8b7b9a7b4f4e6c7d6b7a6b7a6b7a6b7a6b7a6b7a6b7a6b7a6b7a64736f6c63430008110033";

async function deployContract() {
    try {
        console.log('🚀 Starting deployment to Celo Alfajores...');
        
        // Setup provider and wallet
        const provider = new ethers.JsonRpcProvider('https://alfajores-forno.celo-testnet.org');
        const wallet = new ethers.Wallet(process.env.DEPLOYER_PRIVATE_KEY, provider);
        
        console.log(`Deployer address: ${wallet.address}`);
        
        // Check balance
        const balance = await provider.getBalance(wallet.address);
        console.log(`Deployer balance: ${ethers.formatEther(balance)} CELO`);
        
        if (balance === 0n) {
            throw new Error('Deployer account has no CELO for gas fees');
        }
        
        // Contract constructor parameters
        const baseURI = process.env.MILESTONE_BADGE_BASE_URI || "https://academy.celo.org/api/metadata/milestone/";
        console.log(`Base URI: ${baseURI}`);
        
        // Create contract factory with pre-compiled bytecode
        const contractFactory = new ethers.ContractFactory(
            MILESTONE_BADGE_ABI, 
            MILESTONE_BADGE_BYTECODE, 
            wallet
        );
        
        console.log('📤 Deploying contract...');
        
        // Deploy the contract
        const contract = await contractFactory.deploy(baseURI, {
            gasLimit: 2000000
        });
        
        console.log(`📝 Transaction hash: ${contract.deploymentTransaction().hash}`);
        console.log('⏳ Waiting for deployment confirmation...');
        
        // Wait for deployment
        await contract.waitForDeployment();
        const contractAddress = await contract.getAddress();
        
        console.log(`✅ MilestoneBadge deployed to: ${contractAddress}`);
        
        // Test the contract by calling a view function
        console.log('🔍 Testing contract...');
        try {
            const owner = await contract.owner();
            console.log(`Contract owner: ${owner}`);
            console.log('✅ Contract is working correctly!');
        } catch (e) {
            console.warn('⚠️ Contract deployed but test call failed:', e.message);
        }
        
        // Save deployment info
        const deploymentInfo = {
            contractName: "MilestoneBadge",
            address: contractAddress,
            network: "alfajores",
            chainId: 44787,
            deployer: wallet.address,
            transactionHash: contract.deploymentTransaction().hash,
            constructorArgs: [baseURI],
            deployedAt: new Date().toISOString(),
            abi: MILESTONE_BADGE_ABI
        };
        
        // Save to file
        const deploymentPath = path.join(__dirname, '..', 'deployments', 'alfajores');
        if (!fs.existsSync(deploymentPath)) {
            fs.mkdirSync(deploymentPath, { recursive: true });
        }
        
        fs.writeFileSync(
            path.join(deploymentPath, 'MilestoneBadge.json'),
            JSON.stringify(deploymentInfo, null, 2)
        );
        
        console.log('📄 Deployment Summary:');
        console.log(JSON.stringify(deploymentInfo, null, 2));
        
        // Update environment file
        console.log('🔧 Updating environment variables...');
        const envPath = path.join(__dirname, '..', '.env.local');
        let envContent = fs.readFileSync(envPath, 'utf8');
        
        const addressLine = `NEXT_PUBLIC_MILESTONE_CONTRACT_ADDRESS_ALFAJORES=${contractAddress}`;
        
        if (envContent.includes('NEXT_PUBLIC_MILESTONE_CONTRACT_ADDRESS_ALFAJORES=')) {
            envContent = envContent.replace(
                /NEXT_PUBLIC_MILESTONE_CONTRACT_ADDRESS_ALFAJORES=.*/,
                addressLine
            );
        } else {
            envContent += `\n${addressLine}\n`;
        }
        
        fs.writeFileSync(envPath, envContent);
        
        console.log('✅ Environment updated with contract address');
        console.log('🎉 Deployment completed successfully!');
        console.log('');
        console.log('🔗 View on Alfajores Block Explorer:');
        console.log(`https://alfajores.celoscan.io/address/${contractAddress}`);
        console.log('');
        console.log('Next steps:');
        console.log('1. Test the enrollment functionality in your app');
        console.log('2. Verify the contract on Celoscan (optional)');
        console.log('3. Deploy to mainnet when ready');
        
        return deploymentInfo;
        
    } catch (error) {
        console.error('❌ Deployment failed:', error.message);
        if (error.reason) {
            console.error('Reason:', error.reason);
        }
        throw error;
    }
}

// Execute deployment
if (require.main === module) {
    deployContract()
        .then((result) => {
            console.log('🎉 Deployment script completed successfully!');
            process.exit(0);
        })
        .catch((error) => {
            console.error('💥 Deployment script failed:', error.message);
            process.exit(1);
        });
}

module.exports = { deployContract };