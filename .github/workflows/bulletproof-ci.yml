name: 🛡️ Bulletproof CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  FORCE_COLOR: 3

jobs:
  # =============================================================================
  # QUALITY GATES - MANDATORY CHECKS (FAIL FAST)
  # =============================================================================
  quality-gates:
    name: 🚨 Quality Gates (FAIL FAST)
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: celo_mx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/celo_mx_test
      DATABASE_URL_TEST: postgresql://test:test@localhost:5432/celo_mx_test
      NODE_ENV: test
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npx playwright install-deps

      - name: 🗄️ Setup Test Database
        run: |
          npx prisma generate
          npx prisma db push --force-reset

      # ==========================================================================
      # PHASE 1: FAST CHECKS (< 5 minutes)
      # ==========================================================================
      - name: ⚡ Type Check
        run: npm run type-check

      - name: 🎨 Lint Check
        run: npm run lint

      - name: 🔍 Security Audit
        run: |
          npm audit --audit-level=moderate
          if [ $? -ne 0 ]; then
            echo "❌ Security vulnerabilities found"
            exit 1
          fi

      # ==========================================================================
      # PHASE 2: UNIT & COMPONENT TESTS (< 10 minutes)
      # ==========================================================================
      - name: 🧪 Unit Tests
        run: npm run test:unit

      - name: 🧩 Component Tests
        run: npm run test:components

      # ==========================================================================
      # PHASE 3: DATABASE & SECURITY TESTS (< 5 minutes)
      # ==========================================================================
      - name: 🗄️ Database Tests
        run: npm run test:database

      - name: 🛡️ Security Tests
        run: npm run test:security

      # ==========================================================================
      # PHASE 4: INTEGRATION TESTS (< 10 minutes)  
      # ==========================================================================
      - name: 🔗 Integration Tests
        run: npm run test:integration

      # ==========================================================================
      # PHASE 5: COVERAGE VALIDATION (ZERO TOLERANCE)
      # ==========================================================================
      - name: 📊 Coverage Check (95% MINIMUM)
        run: |
          npm run test:coverage
          echo "Checking coverage thresholds..."
          
          # Extract coverage percentages
          COVERAGE=$(npm run test:coverage 2>&1 | grep -o '[0-9.]*%' | tail -4)
          
          echo "Coverage results: $COVERAGE"
          
          # Check if coverage meets requirements
          if npm run coverage:check | grep -q "PASS"; then
            echo "✅ Coverage thresholds met"
          else
            echo "❌ Coverage threshold not met - BLOCKING DEPLOYMENT"
            exit 1
          fi

      # ==========================================================================
      # PHASE 6: BUILD VALIDATION
      # ==========================================================================
      - name: 🏗️ Build Check
        run: |
          npm run build
          if [ $? -ne 0 ]; then
            echo "❌ Build failed"
            exit 1
          fi
          echo "✅ Build successful"

      # ==========================================================================
      # PHASE 7: DATABASE MIGRATION SAFETY
      # ==========================================================================
      - name: 🔄 Migration Safety Check
        run: |
          # Check for breaking schema changes
          npx prisma migrate diff --from-empty --to-schema-datamodel prisma/schema.prisma
          if [ $? -ne 0 ]; then
            echo "❌ Migration safety check failed"
            exit 1
          fi
          echo "✅ Migration safety verified"

      - name: 📤 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          flags: unittests
          name: codecov-umbrella

  # =============================================================================
  # E2E TESTS - PARALLEL EXECUTION
  # =============================================================================
  e2e-tests:
    name: 🌐 E2E Tests
    runs-on: ubuntu-latest
    needs: [quality-gates]
    timeout-minutes: 45

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: celo_mx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/celo_mx_test
      NODE_ENV: test
      PLAYWRIGHT_BASE_URL: http://localhost:3000

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install ${{ matrix.browser }}

      - name: 🗄️ Setup Test Database
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          npx prisma db seed

      - name: 🌐 Run E2E Tests (${{ matrix.browser }})
        run: npx playwright test --project=${{ matrix.browser }}

      - name: 📤 Upload E2E Test Results
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # =============================================================================
  # PERFORMANCE TESTS
  # =============================================================================
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [quality-gates]
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: celo_mx_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/celo_mx_test
      NODE_ENV: test

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🗄️ Setup Test Database
        run: |
          npx prisma generate
          npx prisma db push --force-reset
          npx prisma db seed

      - name: ⚡ Performance Tests
        run: npm run test:performance

      - name: 📊 Performance Report
        if: always()
        run: |
          echo "Performance test completed"
          # Add performance metrics collection here

  # =============================================================================
  # DEPLOYMENT TO STAGING
  # =============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 15

    environment:
      name: staging
      url: https://celo-mx-staging.vercel.app

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: celo-mx-staging.vercel.app

      # ==========================================================================
      # POST-DEPLOYMENT SMOKE TESTS (MANDATORY)
      # ==========================================================================
      - name: 🔍 Staging Smoke Tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run smoke tests against staging
          PRODUCTION_URL=https://celo-mx-staging.vercel.app npm run test:smoke
          
          if [ $? -ne 0 ]; then
            echo "❌ Staging smoke tests failed"
            exit 1
          fi
          echo "✅ Staging deployment verified"

  # =============================================================================
  # DEPLOYMENT TO PRODUCTION
  # =============================================================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15

    environment:
      name: production
      url: https://celo-mx.vercel.app

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      # ==========================================================================
      # POST-DEPLOYMENT SMOKE TESTS (MANDATORY)
      # ==========================================================================
      - name: 🔍 Production Smoke Tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run smoke tests against production
          PRODUCTION_URL=https://celo-mx.vercel.app npm run test:smoke
          
          if [ $? -ne 0 ]; then
            echo "❌ Production smoke tests failed - ROLLBACK REQUIRED"
            exit 1
          fi
          echo "✅ Production deployment verified"

      - name: 📢 Notify Success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "🌟 Application is live at: https://celo-mx.vercel.app"

  # =============================================================================
  # CLEANUP AND NOTIFICATION
  # =============================================================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "🛡️ Bulletproof CI/CD Pipeline Completed"
          echo "=================================="
          echo "Quality Gates: ${{ needs.quality-gates.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"
          echo "Staging Deploy: ${{ needs.deploy-staging.result }}"
          echo "Production Deploy: ${{ needs.deploy-production.result }}"

      - name: ❌ Pipeline Failed
        if: failure()
        run: |
          echo "❌ Pipeline failed - deployment blocked"
          echo "🔍 Check the logs above for failure details"
          exit 1